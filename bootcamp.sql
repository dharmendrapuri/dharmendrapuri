/*
SQL Bootcamp
SQL statements generated by Dharmendra Puri
*/


/*
Provide a list of films (their titles, film IDs and Ratings) that are NOT rated NC-17.
*/
SELECT title, film_id, rating
FROM film
WHERE rating != 'NC-17';

/*
Get the addresses and postal codes of customers who live in Michigan district
*/

SELECT address, postal_code
FROM address
WHERE district = 'Michigan';

/*
Your manager asks for the ist of payment transactions between 2007-02-18 00:00:00 and 2007-02-20 00:00:00. 
Retrieve the payment ID, customer ID, amount and payment dates. 
*/

SELECT payment_id, customer_id, amount, payment_date
FROM payment
WHERE payment_date BETWEEN '2007-02-18' AND '2007-02-20';

/*
Retrieve all available information for customers whose last names are either Williams, Taylor, or Andrews.
*/

SELECT * 
FROM customer
WHERE last_name = 'Williams' OR last_name = 'Taylor' OR last_name = 'Andrews';

/*
The amanger asks for the rental ID and customer ID of transactions that have rental date starting May 26, 2005 and 
return date before May 29, 2005. 
*/

SELECT rental_id, customer_id 
FROM rental
WHERE rental_date BETWEEN '2005-05-26' AND '2005-05-29';

/*
Provide	a	list	of	the	5	shortest	films	with	“G”	rating	
and	rental	rates	ranging	from 2.99	to	4.99.	Show	their	filmID	and	title.				
*/

SELECT film_id, title
FROM film
WHERE rating = 'G' AND rental_rate BETWEEN 2.99 AND 4.99
ORDER BY length
LIMIT 5;

/*
Generate	a	list	of	all	actors	whose	last	names	start	with	“Jo”.	Arrange	the	list	in	
alphabetical	order	of	the	last	name. If	there	are	customers	with	the	same	last	name,	
arrange	the	list	further	by	actor	ID.								
*/

SELECT *
FROM actor
WHERE last_name LIKE 'Jo%'
ORDER BY last_name;
--Aranging the list further by actor id--
SELECT *
FROM actor
WHERE last_name LIKE 'Jo%'
ORDER BY actor_id;
--The actor id of the last actor in the list is 146--

/*
Let’s	play	Words	within	Words	game!		
Use	the	city	table	to	find	all	the	cities	with	words	“gas”	or	“him”		within	the	city	name.	Arrange	the	list	
by	country	ID	(with	the	largest	ID	number	on	top).	Retrieve	all	attributes.	
*/

SELECT *
FROM city
WHERE city LIKE '%gas%' OR city LIKE '%him%'
ORDER BY city_id DESC;

/*
Show the	address	details	of	customers	whose	phone	numbers	end		with	“10”,	arranged	by	city	ID	
where	they	live	(in	ascending	order).		
Retrieve	the	address	column	only.		
*/

SELECT address
FROM address
WHERE phone LIKE '%10'
ORDER BY city_id;

/*
The	manager	asks	for	a	sample	of	10	payment	transactions (of	no		particular	order)	that
occurred	between	8:00:00	AND	17:00:00	on	February	16,	2007	in	the	amount	of	either	0.99,	4.99	or	8.99.				
*/

SELECT *
FROM payment
WHERE amount IN (0.99, 4.99, 8.99) AND  payment_date BETWEEN '2007-02-16 08:00:00' AND '2007-02-16 17:00:00'
LIMIT 10;


/*
Find the top 10 customers who paid the most in a single transaction.
Show their customerID, first name, last name, and amount paid.
Sor the results by amount paid highest on top and by customer ID.
*/

SELECT customer_id, first_name, last_name, amount
FROM customer 
JOIN payment
USING (customer_id)
ORDER BY amount DESC, customer_id 
LIMIT 10;

/*
For the customer named Elizabeth Brown, find all the amounts she paid, the payment dates as wel as
the staff's first and last name who served her on each transaction. Sort the 
results by payment date latest date on top.
*/
SELECT 	staff.first_name AS staff_firs_name, 
		staff.last_name AS staff_last_name,
		customer.first_name AS customer_first_name,
		customer.last_name AS customer_last_name,
		amount AS amount_paid_by_Elizabeth_Brown, 
		payment_date
		
FROM customer
JOIN PAYMENT
USING (customer_id)
LEFT JOIN staff
ON payment.staff_id = staff.staff_id
WHERE customer.first_name = 'Elizabeth' AND customer.last_name = 'Brown'
ORDER BY payment_date DESC;

/*
Also add another column named "Amount > 2.00" which performs 
mathematical operation (amount > 2.99). It will show either true
or false under the column
*/

SELECT 	staff.first_name AS staff_firs_name, 
		staff.last_name AS staff_last_name,
		customer.first_name AS customer_first_name,
		customer.last_name AS customer_last_name,
		amount AS amount_paid_by_Elizabeth_Brown, 
		payment_date, 
		(amount > 2.99) AS "Amount > 2.99"
		
FROM customer
JOIN PAYMENT
USING (customer_id)
LEFT JOIN staff
ON payment.staff_id = staff.staff_id
WHERE customer.first_name = 'Elizabeth' AND customer.last_name = 'Brown'
ORDER BY payment_date DESC;

/*
Produce a table showing the film ID, title, category name (renamed as category)
and inventory ID of films that do not have any inventory.
*/

SELECT film.film_id, 
		title,
		name AS category,
		inventory_id		
FROM film
JOIN film_category
USING (film_id)
JOIN category
USING (category_id)
LEFT JOIN inventory
USING (film_id)
WHERE inventory_id IS NULL;

/*
Using either left join or right join clause, produce a table that shows
the film ID title, language name(renamed as language) and rental date
of film IDs ranging from 144 to 149
*/

SELECT film_id,
		title, 
		name AS language,
		rental_date,
		rental_id
FROM film
JOIN language
USING (language_id)
LEFT JOIN inventory
USING (film_id)
LEFT JOIN rental
USING (inventory_id)
WHERE film_id BETWEEN 144 AND 149;

/*
Which store genereated mroe revenue? Show the store ID and total revenue generaed for each store.
Modify your code a little bit to check. which staff genereated more revenue?
*/

SELECT staff.staff_id, store.store_id, SUM(amount) AS revenue
FROM store 
JOIN staff 
ON store.store_id = staff.store_id
JOIN payment
ON staff.staff_id = payment.staff_id
GROUP BY 1, 2;*/

/*
Show the average number of unique film rentals per month.
The average number of unique film rentals can be obtained by dividing the number of all rentals
by the number of unique films
*/

SELECT DATE_TRUNC('month', p.payment_date), SUM(amount), COUNT(r.rental_id)/COUNT(DISTINCT(f.film_id)) AS average_rental
FROM film f
JOIN inventory i
ON f.film_id = i.film_id
JOIN rental r
ON i.inventory_id = r.inventory_id
JOIN payment p
ON r.rental_id = p.rental_id
GROUP BY 1;

/*
The company is partnering with a bank to offer a platinum credit card to customers 
who had at least 36 payment transactions. 
Show the customer ID, fist name, last name as total number of payment transactions of
customers who are eligible for the platinum card. Sor the results by total number of
transactions payments highest on top.
*/

SELECT c.customer_id, 
		first_name, last_name,  
		COUNT(payment_id) AS tnumofpmt
FROM customer c
JOIN payment p
ON c.customer_id = p.customer_id
GROUP BY 1, 2, 3
HAVING COUNT(payment_id) >= 36
ORDER BY 4 DESC;

/*
Who are company's lifelong customers? A group of anaysts and 
researchers within the company noted that those customers who rented 
at least five times per month tend to be lifelong customers.
Provide a list of these lifelong customers. Show the customer ID,
first name, last name, month and number of rentals in the table
Rename attributes as needed.
*/

SELECT c.customer_id, 
		first_name, 
		last_name, 
		DATE_TRUNC('month', rental_date), 
		COUNT(rental_id)
FROM customer c
JOIN rental r
ON c.customer_id = r.customer_id
GROUP BY 1, 2, 3, 4
HAVING COUNT(rental_id) >= 5
ORDER BY COUNT(rental_id)DESC;

/*
Which are the top 5 countries where most customers come from?
Show the country ID, country name and number of customers per country
*/

SELECT co.country, COUNT(customer_id) AS num_of_customers
FROM city c
JOIN country co
ON c.country_id = co.country_id
JOIN address a
ON a.city_id = c.city_id
JOIN customer 
ON customer.address_id = a.address_id
GROUP BY 1
ORDER BY 2 DESC;

/*
What is the average amount spent by a subset of customers who paid more than the average amount
spend by all the customers in the database?
*/

--Step 1- Compoute the average amount paid by all customers--
SELECT ROUND(AVG(amount),2)
FROM payment;
/*Step 2- Select or show all the amount spent by customers who paid
more than the average amount spent by all customers computed in step 1
*/
SELECT amount
FROM payment
WHERE amount > (SELECT ROUND(AVG(amount),2)
FROM payment);
--Step3- Compute the average amount spent by a subset of customers obtained from step 2--
SELECT ROUND(AVG(amount),2) AVG_subset
FROM (SELECT amount
	FROM payment
	WHERE amount > (SELECT ROUND(AVG(amount),2)
FROM payment)) sub1;
;

/*
Show the film's title, its description and another attribute that you need to create called string_film.
Under this attribute, if the title starts with 'A', extract or show the first word in the title. 
Otherwise, write 'NA' 
*/

SELECT title, description, CASE WHEN title LIKE 'A%' THEN 'A'
			ELSE 'NA'
			END AS string_film
FROM film;

-------OR---------
SELECT title, description, CASE WHEN LEFT(title, 1) = 'A' THEN LEFT(title, 1)
								ELSE 'NA'
								END AS string_film
FROM film;


--------OR----------
SELECT title, description, CASE WHEN LEFT(title, 1) = 'A' THEN LEFT(title, POSITION('' IN title)-1)
								ELSE 'NA'
								END AS string_film
FROM film;

/*
The company has a holiday special. The special promo is to charge only the integer part of the amount.
(or to remove the decimal part). For example, if the amount is $7.99, the customer will be charged $7 only
Come up with this new column that shows this new price (call it holiday_promo)

*/

SELECT *, CAST(amount AS VARCHAR(1)) AS new_promo
FROM payment;

-------OR---------
SELECT *, LEFT(CAST(amount AS VARCHAR(1)),1) AS new_promo
FROM payment;


---End of the Bootcamp---


